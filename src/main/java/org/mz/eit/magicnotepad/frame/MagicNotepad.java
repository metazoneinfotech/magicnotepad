/*
 * Copyright (C) 2017 Metazone Infotech Pvt Ltd.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.

 */
package org.mz.eit.magicnotepad.frame;

import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import org.apache.log4j.LogManager;
import org.mz.eit.magicnotepad.constant.Constant;
/**
 * This is the NotePad Frame where user writes, which display when we open the Application.
 * @author ankesh
 */

public class MagicNotepad extends javax.swing.JFrame {

	private static final long serialVersionUID = -7535740773319087668L;
	private FileReader magicFileReader;
    private int magicChar;
    private static final org.apache.log4j.Logger LOGGER = LogManager.getLogger(MagicNotepad.class.getName());

    public MagicNotepad() {
        initComponents();
        initFiles();
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        notePadScrollPane = new javax.swing.JScrollPane();
        fileArea = new javax.swing.JTextArea();
        menu = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        settings = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("MAGIC NOTEPAD");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setIconImage(Toolkit.getDefaultToolkit().getImage(Constant.MAGIC_ICON_PATH));

        fileArea.setColumns(20);
        fileArea.setRows(5);
        fileArea.addKeyListener(new java.awt.event.KeyAdapter() {
        	@Override
            public void keyTyped(java.awt.event.KeyEvent evt) {
                fileAreaKeyTyped(evt);
            }
        });
        notePadScrollPane.setViewportView(fileArea);

        fileMenu.setText("File");

        settings.setIcon(new javax.swing.ImageIcon(Constant.SETTINGS_MENU_ICON_PATH));
        settings.setText("Settings");
        settings.setMaximumSize(new java.awt.Dimension(36570, 36570));
        settings.setPressedIcon(new javax.swing.ImageIcon(Constant.SETTINGS_ICON_PATH)
        );
        settings.setSelectedIcon(new javax.swing.ImageIcon(Constant.SETTINGS_ICON_PATH)
        );
        settings.addActionListener((ActionEvent evt)->
                settingsActionPerformed());
        fileMenu.add(settings);

        menu.add(fileMenu);

        setJMenuBar(menu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(notePadScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(notePadScrollPane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 279, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
    /**
     * This method is called from within the constructor to initialize the files.
     * regenerated by the Form Editor.
     */
    private void initFiles() {
        BufferedReader reader;
        try {
            reader = new BufferedReader(new FileReader(Constant.PATH_FILE_PATH));
            SettingsFrame.magicFilePath = reader.readLine();
            if (SettingsFrame.magicFilePath == null || SettingsFrame.magicFilePath.isEmpty()) {
                SettingsFrame.magicFilePath = Constant.DEFAULT_FILE_PATH;
            }
            reader.close();
            magicFileReader = new FileReader(SettingsFrame.magicFilePath);
            LOGGER.info("Load Data from Constant Files");
        } catch (FileNotFoundException ex) {
            LOGGER.error(ex.getMessage(), ex);
        } catch (IOException ex) {
            LOGGER.error(ex.getMessage(), ex);
        }
    }
    /**
     * This method is called when we click on setting menu.
     * @param evt 
     */
    private void settingsActionPerformed() {//GEN-FIRST:event_settingsActionPerformed
        LOGGER.info("Setting Option Clicked");
        new LoginFrame().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_settingsActionPerformed
    /**
     * This method is called when we clicked on Text field Area.
     * @param evt 
     */
    private void fileAreaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fileAreaKeyTyped
        LOGGER.info("File Area Key Typed");
        try {
            magicChar = magicFileReader.read();
            evt.setKeyChar((char) magicChar);
        } catch (NullPointerException | IOException ex) {
            LOGGER.error(ex.getMessage(), ex);
        }
    }//GEN-LAST:event_fileAreaKeyTyped


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea fileArea;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenuBar menu;
    private javax.swing.JScrollPane notePadScrollPane;
    private javax.swing.JMenuItem settings;
    // End of variables declaration//GEN-END:variables

}
